package cn.banjiaojuhao.lab.se.dbinterface

import cn.banjiaojuhao.lab.se.event.*

interface IEvent {
    /**
     * 查询录入员的数据，按照时间降序
     * query appeals from tb_appeal
     *
     * @param source    uid of keyboarder.
     * @return list of appeal
     */
    fun queryAppeal(source: Int): List<Event>

    /**
     * insert event into tb_appeal
     * attention: rec_id is generated by sqlite, not from event
     *
     * @param event appeal to insert
     */
    fun addAppeal(event: Event)

    /**
     * delete event from tb_appeal
     *
     * @param rec_id appeal with rec_id to delete
     */
    fun deleteAppeal(rec_id: Int)

    /**
     * update event in tb_appeal
     *
     * @param event appeal to update(
     */
    fun updateAppeal(event: Event)

    /**
     * 顶部数据展示
     * query overall count except service_index
     *
     * @return
     */
    fun queryOverall(startTime: Long, endTime: Long): Overall

    /**
     * 统计热点社区
     * query event count group by community_id
     *
     * @return
     */
    fun queryHotCommunity(startTime: Long, endTime: Long): List<HotCommunity>

    /**
     * 问题性质分布
     * query event count group by property
     *
     * @return
     */
    fun queryProperty(startTime: Long, endTime: Long): List<EventProperty>

    /**
     * 事件结办分析
     * query event count group by event_dispose_state and event_type_id
     *
     * @return
     */
    fun queryArchiveEvent(startTime: Long, endTime: Long): List<ArchiveEvent>

    /**
     * 热点问题词云
     * query event count group by main_type_id
     *
     * @return
     */
    fun queryWordCloud(startTime: Long, endTime: Long): List<WordCloud>

    /**
     * 各街道民生事件情况
     * query event count group by street and sub_type
     *
     * @return
     */
    fun queryStreetSubtype(startTime: Long, endTime: Long): List<StreetSubtype>


    /**
     * 问题来源统计
     * query event count group by main_type_id
     *
     * @return
     */
    fun queryEventSrc(startTime: Long?, endTime: Long?): List<EventSrc>


    /**
     * 动态展示未结办事件
     * query short event created after timeAfter
     * where create_time >= timeAfter
     *
     * @param timeAfter
     * @return
     */
    fun queryShortEvent(timeAfter: Long?): List<ShortEvent>

    /**
     * 尚未结办报警
     * query undisposed appeals from tb_appeal
     * where event_dispose_state == 1
     * order by event_type_id(inc) and create_time(inc)
     *
     * @return list of appeal
     */
    fun queryUndisposedAppeal(): List<Event>


    /**
     * 消极怠工报警
     * query total time passed of every unit
     *
     * @return
     */
    fun queryTimePassed(): List<TimePassed>

    /**
     * query department kpi except service_index
     *
     * @return
     */
    fun queryDepartmentKpi(): List<DepartmentKpi>
}